<?xml version="1.0" encoding="utf-8"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" viewBox="0 0 100 100" y="0" x="0" id="圖層_1" version="1.1" width="200px" height="200px" style="width:100%;height:100%;background-size:initial;background-repeat-y:initial;background-repeat-x:initial;background-position-y:initial;background-position-x:initial;background-origin:initial;background-color:initial;background-clip:initial;background-attachment:initial;animation-play-state:paused"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><g class="ldl-scale" style="transform-origin:50% 50%;transform:rotate(0deg) scale(0.8, 0.8);animation-play-state:paused"><path fill="#b5b5b5" d="M92.5 36.3c0 4.5-3.9 8.2-8.6 8.2h-21c.5-1.4.9-2.9.9-4.5 0-5.1-3.1-9.6-7.7-11.4.1-.8.2-1.7.2-2.5 0-1.9-.3-3.8-1-5.5 1.4-1.1 3.2-1.8 5.2-1.8.9 0 1.7.1 2.4.4C65 15.5 69 13 73.7 13c6.7 0 12.2 5.2 12.2 11.6 0 1.2-.2 2.4-.6 3.5 4.1.7 7.2 4.1 7.2 8.2zm-39.3-6c.4-1.3.6-2.7.6-4.2 0-1.2-.1-2.3-.4-3.4-1.5-6-7-10.5-13.5-10.5-5.3 0-9.9 3-12.3 7.4-.9-.3-1.8-.4-2.8-.4-5.1 0-9.3 4.1-9.3 9.3 0 .6.1 1.3.2 1.9-4.7.7-8.3 4.8-8.3 9.7 0 5.4 4.4 9.8 9.8 9.8h34.2c3.8 0 7.1-2.2 8.8-5.4.7-1.3 1.1-2.9 1.1-4.5.1-4.8-3.5-8.9-8.1-9.7z" style="fill:rgb(181, 181, 181);animation-play-state:paused"/>
<g style="animation-play-state:paused"><g style="animation-play-state:paused"><path fill="#77a4bd" d="M26.1 61.7l1.6-4.3c.4-1.1-.1-2.3-1.2-2.8-1.1-.4-2.3.1-2.8 1.2l-1.6 4.3c-.4 1.1.1 2.3 1.2 2.8.3.1.5.1.8.1.8.1 1.7-.4 2-1.3z" style="fill:rgb(119, 164, 189);animation-play-state:paused"/></g>
<g style="animation-play-state:paused"><path fill="#77a4bd" d="M34.4 68.6l4.2-11.1c.4-1.1-.1-2.3-1.2-2.8-1.1-.4-2.3.1-2.8 1.2L30.4 67c-.4 1.1.1 2.3 1.2 2.8.2.1.5.1.8.1.9.1 1.7-.5 2-1.3z" style="fill:rgb(119, 164, 189);animation-play-state:paused"/></g>
<g style="animation-play-state:paused"><path fill="#77a4bd" d="M42.7 75.4l6.8-18c.4-1.1-.1-2.3-1.2-2.8-1.1-.4-2.3.1-2.8 1.2l-6.8 18c-.4 1.1.1 2.3 1.2 2.8.2.1.5.1.8.1.9.1 1.7-.4 2-1.3z" style="fill:rgb(119, 164, 189);animation-play-state:paused"/></g>
<g style="animation-play-state:paused"><path fill="#77a4bd" d="M58.3 63.1l2.1-5.5c.4-1.1-.1-2.3-1.2-2.8-1.1-.4-2.3.1-2.8 1.2l-2.1 5.5c-.4 1.1.1 2.3 1.2 2.8.3.1.5.1.8.1.8.1 1.6-.5 2-1.3z" style="fill:rgb(119, 164, 189);animation-play-state:paused"/></g>
<g style="animation-play-state:paused"><path fill="#77a4bd" d="M65.1 74.2l7.3-20.3c.4-1.1-.2-2.3-1.3-2.7-1.1-.4-2.3.2-2.7 1.3l-7.3 20.3c-.4 1.1.2 2.3 1.3 2.7.2.1.5.1.7.1.9 0 1.7-.5 2-1.4z" style="fill:rgb(119, 164, 189);animation-play-state:paused"/></g>
<g style="animation-play-state:paused"><path fill="#77a4bd" d="M77.4 66.8l4.3-13.1c.4-1.1-.2-2.3-1.4-2.7-1.1-.4-2.3.2-2.7 1.4l-4.3 13.1c-.4 1.1.2 2.3 1.4 2.7.2.1.4.1.7.1.9 0 1.7-.6 2-1.5z" style="fill:rgb(119, 164, 189);animation-play-state:paused"/></g>
<g style="animation-play-state:paused"><path fill="#77a4bd" d="M16.9 86.4l6.4-17.3c.4-1.1-.2-2.3-1.3-2.8-1.1-.4-2.3.2-2.8 1.3l-6.4 17.3c-.4 1.1.2 2.3 1.3 2.8.2.1.5.1.7.1.9 0 1.8-.6 2.1-1.4z" style="fill:rgb(119, 164, 189);animation-play-state:paused"/></g>
<g style="animation-play-state:paused"><path fill="#77a4bd" d="M27.6 86.4l3.8-9.8c.4-1.1-.1-2.3-1.2-2.8-1.1-.4-2.3.1-2.8 1.2l-3.8 9.8c-.4 1.1.1 2.3 1.2 2.8.3.1.5.1.8.1.9.1 1.7-.4 2-1.3z" style="fill:rgb(119, 164, 189);animation-play-state:paused"/></g>
<g style="animation-play-state:paused"><path fill="#77a4bd" d="M38.5 86.4l1-2.7c.4-1.1-.1-2.3-1.2-2.8-1.1-.4-2.3.1-2.8 1.2l-1 2.7c-.4 1.1.1 2.3 1.2 2.8.3.1.5.1.8.1.9.1 1.7-.4 2-1.3z" style="fill:rgb(119, 164, 189);animation-play-state:paused"/></g>
<g style="animation-play-state:paused"><path fill="#77a4bd" d="M49.3 86.4l5.9-15.2c.4-1.1-.1-2.3-1.2-2.8-1.1-.4-2.3.1-2.8 1.2l-5.9 15.2c-.4 1.1.1 2.3 1.2 2.8.3.1.5.1.8.1.8.1 1.6-.4 2-1.3z" style="fill:rgb(119, 164, 189);animation-play-state:paused"/></g>
<g style="animation-play-state:paused"><path fill="#77a4bd" d="M72.2 81.9l2.9-7.7c.4-1.1-.1-2.3-1.2-2.8-1.1-.4-2.3.1-2.8 1.2l-2.9 7.7c-.4 1.1.1 2.3 1.2 2.8.3.1.5.1.8.1.9.1 1.7-.4 2-1.3z" style="fill:rgb(119, 164, 189);animation-play-state:paused"/></g></g>
<metadata xmlns:d="https://loading.io/stock/" style="animation-play-state:paused"><d:name style="animation-play-state:paused">rain</d:name>
<d:tags style="animation-play-state:paused">rainy,water,precipitation,fall,storm,thunder,rain,weather</d:tags>
<d:license style="animation-play-state:paused">pro</d:license>
<d:slug style="animation-play-state:paused">8vxbuk</d:slug></metadata></g><!-- generated by https://loading.io/ --></svg>